--- abrt-1.0.0/src/Daemon/Makefile.am~	2009-11-22 21:50:18.000000000 +0200
+++ abrt-1.0.0/src/Daemon/Makefile.am	2009-12-07 13:07:30.732868433 +0200
@@ -16,6 +16,7 @@
 abrtd_CPPFLAGS = \
     -I$(srcdir)/../../inc \
     -I$(srcdir)/../../lib/Utils \
+    -I/usr/include/rpm \
     -DBIN_DIR=\"$(bindir)\" \
     -DVAR_RUN=\"$(VAR_RUN)\" \
     -DCONF_DIR=\"$(CONF_DIR)\" \
--- abrt-1.0.7/src/Daemon/RPM.cpp	2010-03-15 00:26:28.929435334 +0200
+++ abrt-1.0.8/src/Daemon/RPM.cpp	2010-03-24 13:03:13.691485654 +0200
@@ -33,9 +33,11 @@
 
 void CRPM::LoadOpenGPGPublicKey(const char* pFileName)
 {
+#if 0
     uint8_t* pkt = NULL;
     size_t pklen;
     pgpKeyID_t keyID;
+
     if (pgpReadPkts(pFileName, &pkt, &pklen) != PGPARMOR_PUBKEY)
     {
         free(pkt);
@@ -51,11 +53,13 @@
         }
     }
     free(pkt);
+#endif
 }
 
 bool CRPM::CheckFingerprint(const char* pPackage)
 {
     bool ret = false;
+#if 0
     rpmts ts = rpmtsCreate();
     rpmdbMatchIterator iter = rpmtsInitIterator(ts, RPMTAG_NAME, pPackage, 0);
     Header header = rpmdbNextIterator(iter);
@@ -97,12 +101,14 @@
     }
     rpmdbFreeIterator(iter);
     rpmtsFree(ts);
+#endif
     return ret;
 }
 
 bool CheckHash(const char* pPackage, const char* pPath)
 {
     bool ret = false;
+#if 0
     rpmts ts = rpmtsCreate();
     rpmdbMatchIterator iter = rpmtsInitIterator(ts, RPMTAG_NAME, pPackage, 0);
     Header header = rpmdbNextIterator(iter);
@@ -128,23 +134,25 @@
     rpmdbFreeIterator(iter);
     rpmtsFree(ts);
     return ret;
+#endif
 }
 
 std::string GetDescription(const char* pPackage)
 {
-    std::string pDescription;
+    std::string pDescription = "";
+
     rpmts ts = rpmtsCreate();
     rpmdbMatchIterator iter = rpmtsInitIterator(ts, RPMTAG_NAME, pPackage, 0);
     Header header = rpmdbNextIterator(iter);
     if (header != NULL)
     {
-        rpmtd td = rpmtdNew();
-        headerGet(header, RPMTAG_SUMMARY, td, HEADERGET_DEFAULT);
-        const char* summary = rpmtdGetString(td);
-        headerGet(header, RPMTAG_DESCRIPTION, td, HEADERGET_DEFAULT);
-        const char* description = rpmtdGetString(td);
+        const char *summary, *description;
+        int_32 type, count;
+
+        headerGetEntry(header, RPMTAG_SUMMARY, &type, (void**)&summary, &count);
+        headerGetEntry(header, RPMTAG_DESCRIPTION, &type, (void**)&description, &count);
+
         pDescription = summary + std::string("\n\n") + description;
-        rpmtdFree(td);
     }
     rpmdbFreeIterator(iter);
     rpmtsFree(ts);
@@ -153,7 +161,8 @@
 
 std::string GetComponent(const char* pFileName)
 {
-    std::string ret;
+    std::string ret = "";
+#if 0
     rpmts ts = rpmtsCreate();
     rpmdbMatchIterator iter = rpmtsInitIterator(ts, RPMTAG_BASENAMES, pFileName, 0);
     Header header = rpmdbNextIterator(iter);
@@ -172,12 +181,14 @@
 
     rpmdbFreeIterator(iter);
     rpmtsFree(ts);
+#endif
     return ret;
 }
 
 char* GetPackage(const char* pFileName)
 {
     char* ret = NULL;
+#if 0
     rpmts ts = rpmtsCreate();
     rpmdbMatchIterator iter = rpmtsInitIterator(ts, RPMTAG_BASENAMES, pFileName, 0);
     Header header = rpmdbNextIterator(iter);
@@ -189,4 +200,5 @@
     rpmdbFreeIterator(iter);
     rpmtsFree(ts);
+#endif
     return ret;
 }
